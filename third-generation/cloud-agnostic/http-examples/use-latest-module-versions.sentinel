# This policy uses the HTTP import to call the TFC API to get a list of all
# modules in a specified module registry and determine their
# latest versions. It then uses the tfconfig/v2 import to inspect all non-root
# modules and validate that those sourced from the registry allow the latest
# versions based on their version constraints. Since Terraform will always use
# the most recent version allowed by a version constraint, this ensures that
# the most recent version of the module will be used.

# Note that this policy requires the Sentinel runtime 0.16.0 or higher since it
# uses the Sentinel [version](https://docs.hashicorp.com/sentinel/imports/version) import.

# Additionally, this policy uses Sentinel parameters

##### Imports #####

# Import common-functions/tfconfig-functions/tfconfig-functions.sentinel
# with alias "config"
import "tfconfig-functions" as config

# Standard Imports
import "http"
import "strings"
import "json"
import "version"

##### Parameters #####
# A boolean indicating whether the public Terraform registry is being used
param public_registry default false
# The address of the Terraform Cloud or Terraform Enterprise server
param address default "app.terraform.io"
# The name of the Terraform Cloud or Terraform Enterprise organization
param organization
# A valid Terraform Cloud or Terraform Enterprise API token
param token

##### Functions #####

# Retrieve modules from a module registry and give their paths and latest versions
retrieve_latest_module_versions = func(public_registry, address, organization, token) {

  # Call the TFC Modules API and extract the response
  if public_registry {
    # We are limiting the request to 20 verified modules for the
    # namespace in the public registry matching the organzation parameter
    req = http.request("https://" + address + "/v1/modules/"  +
                       organization + "?limit=20&verified=true")
  } else {
    req = http.request("https://" + address + "/api/registry/v1/modules/"  +
                       organization)
    req = req.with_header("Authorization", "Bearer " + token)
  }
  res = json.unmarshal(http.get(req).body)

  modules = {}

  # Iterate over the modules and extract names, providers, and latest versions
  for res.modules as m {
    index = m.namespace + "/" + m.name + "/" + m.provider
    modules[index] = m.version
  }

  # modules is indexed by <name>/<provider> and contains most recent version
  return modules
}

# Validate sources of modules in the registry
validate_modules = func(public_registry, address, organization, token) {

  validated = true

  # Get latest module versions from registry
  discovered_modules = retrieve_latest_module_versions(public_registry, address,
                       organization, token)

  # Get all module addresses
  allModuleAddresses = config.find_descendant_modules("")
  #print("Module addresses:", allModuleAddresses)

  # Iterate over all modules in the tfconfig/v2 import
  for allModuleAddresses as module_address {
    moduleCalls = config.find_module_calls_in_module(module_address)
    # Iterate over modules of the current module
    for moduleCalls as index, m {
      # Check if module is in the PMR
      if strings.has_prefix(m.source, address + "/" + organization) {
        # Check version constraint of module against latest version in PMR
        org_name_provider = strings.trim_prefix(m.source, address + "/")
        most_recent_version = discovered_modules[org_name_provider]
        if not version.new(most_recent_version).satisfies(m.version_constraint) {
          if length(module_address) == 0 {
            print("PMR module", m.source, "used in the root module",
                  "has version constraint", m.version_constraint, "that does not",
                  "allow the most recent version", most_recent_version)
            validated = false
          } else {
            print("PMR module", m.source, "used in module", module_address,
                  "has version constraint", m.version_constraint, "that does not",
                  "allow the most recent version", most_recent_version)
            validated = false
          } // end root module check
        } // end version check
      } else {
        # Check version constraint of module against latest version in public registry
        most_recent_version = discovered_modules[m.source]
        if m.source in keys(discovered_modules) {
          most_recent_version = discovered_modules[m.source]
          if not version.new(most_recent_version).satisfies(m.version_constraint) {
            if length(module_address) == 0 {
              print("Public registry module", m.source, "used in the root module",
                    "has version constraint", m.version_constraint, "that does not",
                    "allow the most recent version", most_recent_version)
              validated = false
            } else {
              print("Public registry module", m.source, "used in module",
                    module_address, "has version constraint", m.version_constraint,
                    "that does not allow the most version", most_recent_version)
              validated = false
            } // end root module check
          } // end version check
        } // end source in keys
      } // end if module in PMR or public registry
    } // end for module calls
  } // end modules

  return validated
}

##### Rules #####

# Call the validation function
modules_validated = validate_modules(public_registry, address, organization, token)

# Main rule
main = rule {
  modules_validated
}
